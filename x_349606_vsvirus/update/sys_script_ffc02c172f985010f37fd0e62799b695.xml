<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_349606_vsvirus_validation</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_349606_vsvirus_validation">stateCHANGESTO2^EQ<item display_value="Validating" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="2"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate register number</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    try {
		
		if(current.registration_number == ''){
				current.result = 'invalid';
				current.state = '3';
                current.update();
	}else{
		
        var s = new sn_ws.SOAPMessageV2('x_349606_vsvirus.BIG web services', 'PublicV4Soap.ListHcpApprox4');

        s.setStringParameterNoEscape('listHcpApproxRequest.WebSite', 'Ribiz');
        s.setStringParameterNoEscape('listHcpApproxRequest.Gender', '');
        s.setStringParameterNoEscape('listHcpApproxRequest.ProfessionalGroup', '');
        s.setStringParameterNoEscape('listHcpApproxRequest.DateOfBirth', '');
        s.setStringParameterNoEscape('listHcpApproxRequest.Name', '');
        s.setStringParameterNoEscape('listHcpApproxRequest.TypeOfSpecialism', '');
        s.setStringParameterNoEscape('listHcpApproxRequest.Initials', '');
        s.setStringParameterNoEscape('listHcpApproxRequest.RegistrationNumber', current.registration_number); //29914775101, 99927134030, 49921237730
        var response = s.execute();
        var responseBody = response.getBody();
        var status = response.getStatusCode();

        gs.info(status); //500 not found or 200 found
        gs.info(responseBody);

        if (status == 200) {
            var xmldoc = new XMLDocument2();
            xmldoc.parseXML(responseBody);
            var registrNmb = xmldoc.getNodeText('//ArticleRegistrationNumber');
            if (current.registration_number == registrNmb) {
                var intials = xmldoc.getNodeText('//Initial');
                var lastname = xmldoc.getNodeText('//BirthSurname');
                var gender = xmldoc.getNodeText('//Gender');
                var profGcode = xmldoc.getNodeText('//ProfessionalGroupCode');
                current.result = 'valid';
                current.initials = intials;
                current.lastname = lastname;
                current.gender = gender;
                current.profession_code = profGcode;
				current.profession = getProffesion(profGcode);
				current.state = '3';
                current.update();

            } else if (registrNmb == null || registrNmb == '') {
                current.result = 'invalid';
				current.state = '3';
                current.update();
            }

        }
	}


    } catch (ex) {
        var message = ex.message;
    }
	
	function getProffesion(code){
		var prof = '';
		var getProf = new GlideRecord('x_349606_vsvirus_professional_codes');
		getProf.addQuery('code', code);
		getProf.query();
		if(getProf.next())
			prof = getProf.sys_id + '';
		
		return prof;
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>wrangu.pier</sys_created_by>
        <sys_created_on>2020-04-25 22:14:27</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ffc02c172f985010f37fd0e62799b695</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>Validate register number</sys_name>
        <sys_overrides/>
        <sys_package display_value="MediCast" source="x_349606_vsvirus">98e08a3a2f581010f37fd0e62799b6cf</sys_package>
        <sys_policy/>
        <sys_scope display_value="MediCast">98e08a3a2f581010f37fd0e62799b6cf</sys_scope>
        <sys_update_name>sys_script_ffc02c172f985010f37fd0e62799b695</sys_update_name>
        <sys_updated_by>wrangu.pier</sys_updated_by>
        <sys_updated_on>2020-04-26 08:11:18</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=ffc02c172f985010f37fd0e62799b695"/>
</record_update>
